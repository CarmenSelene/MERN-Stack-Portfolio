{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\thegr\\\\src\\\\react-clicky-express\\\\client\\\\src\\\\components\\\\Game\\\\GameBox\\\\GameBoard.js\";\nimport React, { Component } from \"react\";\nimport Masterlist from \"../../../characters.json\";\nimport Gameresults from \"./ResultList\";\nimport Gamebar from \"../Gamebar/Gamebar\";\nimport GameOver from \"./GameOver\";\n\nvar GameBoard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameBoard, _Component);\n\n  function GameBoard(props) {\n    var _this;\n\n    _classCallCheck(this, GameBoard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GameBoard).call(this, props));\n\n    _this.getId = function (input) {\n      if (input.isClicked === true) {\n        _this.setState({\n          Gameover: true\n        });\n      } else _this.changeAndShuffle(input);\n    };\n\n    _this.updateCounterClick = function () {\n      _this.setState({\n        Count: _this.state.Count + 1\n      });\n    };\n\n    _this.shuffle = function (array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    _this.newGame = function (e) {\n      _this.setState({\n        Masterlist: Masterlist,\n        Count: 0,\n        Gameover: false\n      });\n    };\n\n    _this.changeAndShuffle = function (whichOneClicked) {\n      var changeThisOne = whichOneClicked.id;\n      var updatedMasterlist = _this.state.Masterlist;\n      updatedMasterlist[changeThisOne].isClicked = true;\n\n      _this.shuffle(updatedMasterlist);\n\n      _this.setState({\n        Masterlist: updatedMasterlist\n      });\n    };\n\n    _this.state = {\n      Masterlist: Masterlist,\n      Count: 0,\n      Gameover: false\n    };\n    _this.getId = _this.getId.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateCounterClick = _this.updateCounterClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newGame = _this.newGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Current Object Tracker (for use by other game functions)\n\n\n  _createClass(GameBoard, [{\n    key: \"render\",\n    // Render Logic\n    value: function render() {\n      if (this.state.Gameover === false) {\n        return React.createElement(\"div\", {\n          className: \"wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(Gamebar, {\n          countstate: this.state.Count,\n          gamestate: this.state.Gameover,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }), React.createElement(Gameresults, {\n          results: this.state.Masterlist,\n          updateCounterClick: this.updateCounterClick,\n          changeAndShuffle: this.changeAndShuffle,\n          getId: this.getId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(GameOver, {\n          countstate: this.state.Count,\n          gamestate: this.state.Gameover,\n          newGame: this.newGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return GameBoard;\n}(Component);\n\nexport { GameBoard as default };","map":{"version":3,"sources":["C:\\Users\\thegr\\src\\react-clicky-express\\client\\src\\components\\Game\\GameBox\\GameBoard.js"],"names":["React","Component","Masterlist","Gameresults","Gamebar","GameOver","GameBoard","props","getId","input","isClicked","setState","Gameover","changeAndShuffle","updateCounterClick","Count","state","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","newGame","e","whichOneClicked","changeThisOne","id","updatedMasterlist","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Masterlist from \"../../../characters.json\";\r\nimport Gameresults from \"./ResultList\";\r\nimport Gamebar from \"../Gamebar/Gamebar\";\r\nimport GameOver from \"./GameOver\";\r\n\r\nexport default class GameBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Masterlist, Count: 0, Gameover: false,\r\n        };\r\n        this.getId = this.getId.bind(this);\r\n        this.updateCounterClick = this.updateCounterClick.bind(this);\r\n        this.newGame = this.newGame.bind(this);\r\n    }\r\n\r\n    // Current Object Tracker (for use by other game functions)\r\n    getId = input => {\r\n        if (input.isClicked === true) {\r\n            this.setState({ Gameover: true });\r\n        } else\r\n            this.changeAndShuffle(input);\r\n    }\r\n\r\n    // Increment Click Counter\r\n    updateCounterClick = () => {\r\n        this.setState({\r\n            Count: this.state.Count + 1\r\n        });\r\n    }\r\n\r\n    // Shuffle Function\r\n    shuffle = (array) => {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    // Reset Game State to Initial\r\n    newGame = (e) => {\r\n        this.setState({ Masterlist: Masterlist, Count: 0, Gameover: false });\r\n    }\r\n\r\n    // User Click Handler (ie Game Logic)\r\n    changeAndShuffle = whichOneClicked => {\r\n        const changeThisOne = whichOneClicked.id;\r\n        const updatedMasterlist = this.state.Masterlist\r\n        updatedMasterlist[changeThisOne].isClicked = true;\r\n        this.shuffle(updatedMasterlist);\r\n        this.setState({\r\n            Masterlist: updatedMasterlist\r\n        });\r\n    }\r\n\r\n    // Render Logic\r\n    render() {\r\n        if (this.state.Gameover === false) {\r\n            return (\r\n                <div className=\"wrapper\">\r\n                    <Gamebar\r\n                        countstate={this.state.Count}\r\n                        gamestate={this.state.Gameover}\r\n                    />\r\n                    <Gameresults\r\n                        results={this.state.Masterlist}\r\n                        updateCounterClick={this.updateCounterClick}\r\n                        changeAndShuffle={this.changeAndShuffle}\r\n                        getId={this.getId}\r\n                    />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <GameOver\r\n                    countstate={this.state.Count}\r\n                    gamestate={this.state.Gameover}\r\n                    newGame={this.newGame}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}